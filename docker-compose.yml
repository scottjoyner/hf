services:
  minio:
    image: minio/minio:latest
    container_name: minio
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
    command: server /data --console-address ":9001"
    ports:
      - "19000:9000"   # host:container (API)
      - "19001:9001"   # host:container (Web console)
    volumes:
      - minio-data:/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 10s
      timeout: 5s
      retries: 5

  mc:
    image: minio/mc:latest
    container_name: minio-mc
    depends_on:
      minio:
        condition: service_started
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
      MINIO_BUCKET: ${MINIO_BUCKET}
    entrypoint: ["/bin/sh","-lc"]
    command: >
      mc alias set local http://minio:9000 "$MINIO_ROOT_USER" "$MINIO_ROOT_PASSWORD" &&
      (mc ls "local/$MINIO_BUCKET" || mc mb -p "local/$MINIO_BUCKET") &&
      echo "MinIO bucket ready: $MINIO_BUCKET"

  pipeline-image:
    build: .
    image: models-pipeline:latest
    container_name: pipeline-image
    env_file: .env
    volumes:
      - cache:/app/cache
      - hf_models:/app/hf_models
      - db:/app/db
      - ./data:/app/data
    # ENTRYPOINT comes from Dockerfile; run "help" by default
    command: ["help"]

  scraper:
    image: models-pipeline:latest
    env_file: .env
    depends_on:
      - pipeline-image
    volumes:
      - cache:/app/cache
      - db:/app/db
      - ./data:/app/data
    command: ["scrape"]

  downloader:
    image: models-pipeline:latest
    env_file: .env
    depends_on:
      - pipeline-image
    volumes:
      - cache:/app/cache
      - hf_models:/app/hf_models
      - db:/app/db
      - ./data:/app/data
    command: ["download"]

  metadata:
    image: models-pipeline:latest
    env_file: .env
    depends_on:
      - pipeline-image
    volumes:
      - cache:/app/cache
      - db:/app/db
      - ./data:/app/data
    command: ["metadata"]

  sync:
    image: models-pipeline:latest
    env_file: .env
    depends_on:
      - pipeline-image
      - mc
    volumes:
      - hf_models:/app/hf_models
    command: ["sync"]

  db-web:
    image: models-pipeline:latest
    env_file: .env
    depends_on:
      - pipeline-image
    volumes:
      - db:/app/db
    ports:
      - "8080:8080"
    command: ["db-web"]

  pipeline:
    image: models-pipeline:latest
    env_file: .env
    depends_on:
      - pipeline-image
      - mc
    volumes:
      - cache:/app/cache
      - hf_models:/app/hf_models
      - db:/app/db
      - ./data:/app/data
    command: ["all"]

volumes:
  minio-data:
  cache:
  hf_models:
  db:
