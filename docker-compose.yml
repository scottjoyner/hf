services:
  minio:
    image: minio/minio:latest
    container_name: minio
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
    command: server /data --console-address ":9001"
    ports:
      - "19000:9000"   # API
      - "19001:9001"   # Web console
    volumes:
      - minio-data:/data

  mc:
    image: minio/mc:latest
    container_name: minio-mc
    depends_on:
      minio:
        condition: service_started
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
      MINIO_BUCKET: ${MINIO_BUCKET}
    entrypoint: ["/bin/sh","-c"]
    command: >
      echo "Configuring mc alias...";
      for i in $$(seq 1 120); do
        mc alias set minio http://minio:9000 "$$MINIO_ROOT_USER" "$$MINIO_ROOT_PASSWORD" >/dev/null 2>&1 && break;
        sleep 1;
      done;
      echo "Waiting for MinIO list to succeed...";
      for i in $$(seq 1 120); do
        mc ls minio >/dev/null 2>&1 && break;
        sleep 1;
      done;
      echo "Ensuring bucket exists: $$MINIO_BUCKET";
      mc mb -p "minio/$$MINIO_BUCKET" >/dev/null 2>&1 || true;
      mc ls "minio/$$MINIO_BUCKET" >/dev/null || { echo "Bucket check failed"; exit 1; }
      echo "MinIO bucket ready: $$MINIO_BUCKET";
      tail -f /dev/null
    healthcheck:
      test: ["CMD-SHELL", "mc alias set minio http://minio:9000 \"$$MINIO_ROOT_USER\" \"$$MINIO_ROOT_PASSWORD\" >/dev/null 2>&1 && mc ls minio/\"$$MINIO_BUCKET\" >/dev/null 2>&1"]
      interval: 5s
      timeout: 3s
      retries: 20
  
  sync:
    image: models-pipeline:latest
    env_file: .env
    depends_on:
      mc:
        condition: service_healthy
    volumes:
      - hf_models:/app/hf_models
    command: ["sync"]
  
  worker:
    build: .
    depends_on: [minio, mc]
    volumes:
      - ./data:/app/data
  
  pipeline-image:
    build: .
    image: models-pipeline:latest
    container_name: pipeline-image
    env_file: .env
    volumes:
      - cache:/app/cache
      - hf_models:/app/hf_models
      - db:/app/db
      - ./data:/app/data
    # ENTRYPOINT comes from Dockerfile; run "help" by default
    command: ["help"]

  scraper:
    image: models-pipeline:latest
    env_file: .env
    depends_on:
      - pipeline-image
    volumes:
      - cache:/app/cache
      - db:/app/db
      - ./data:/app/data
    command: ["scrape"]

  downloader:
    image: models-pipeline:latest
    env_file: .env
    depends_on:
      - pipeline-image
    volumes:
      - cache:/app/cache
      - hf_models:/app/hf_models
      - db:/app/db
      - ./data:/app/data
    command: ["download"]

  metadata:
    image: models-pipeline:latest
    env_file: .env
    depends_on:
      - pipeline-image
    volumes:
      - cache:/app/cache
      - db:/app/db
      - ./data:/app/data
    command: ["metadata"]

  db-web:
    image: models-pipeline:latest
    env_file: .env
    depends_on:
      - pipeline-image
    volumes:
      - db:/app/db
    ports:
      - "8080:8080"
    command: ["db-web"]

  pipeline:
    image: models-pipeline:latest
    env_file: .env
    depends_on:
      mc:
        condition: service_healthy
      pipeline-image:
        condition: service_started
    volumes:
      - cache:/app/cache
      - hf_models:/app/hf_models
      - db:/app/db
      - ./data:/app/data
    command: ["all"]

  registry:
    build:
      context: .
      dockerfile: Dockerfile.registry
    image: models-registry:latest
    container_name: models-registry
    depends_on:
      mc:
        condition: service_healthy
      pipeline-image:
        condition: service_started
    env_file:
      - .env
    environment:
      DB_PATH: /app/db/models.db
      MINIO_ENDPOINT: ${MINIO_ENDPOINT:-minio:9000}
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
      MINIO_BUCKET: ${MINIO_BUCKET}
      MINIO_SECURE: ${MINIO_SECURE:-false}
      REGISTRY_ADMIN_TOKEN: ${REGISTRY_ADMIN_TOKEN:-changeme}
    volumes:
      - db:/app/db
      - hf_models:/app/hf_models
    ports:
      - "8081:8081"

  manifest-exporter:
    image: models-registry:latest  # reuse the same image (has minio + code)
    container_name: manifest-exporter
    depends_on:
      - registry
      - minio
    env_file:
      - .env
    environment:
      DB_PATH: /app/db/models.db
      MINIO_ENDPOINT: ${MINIO_ENDPOINT:-minio:9000}
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
      MINIO_BUCKET: ${MINIO_BUCKET}
      MINIO_SECURE: ${MINIO_SECURE:-false}
    volumes:
      - db:/app/db
      - ./data:/app/data
    command: ["python", "scripts/export_manifests.py", "--publish", "--out-dir", "/app/data/manifests", "--every", "86400"]

volumes:
  minio-data:
  cache:
  hf_models:
  db:
