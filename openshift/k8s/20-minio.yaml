apiVersion: apps/v1
kind: Deployment
metadata:
  name: minio
  namespace: ${NS}
  labels: { app: minio }
spec:
  replicas: 1
  selector: { matchLabels: { app: minio } }
  template:
    metadata:
      labels: { app: minio }
    spec:
      securityContext:
        runAsNonRoot: true
        allowPrivilegeEscalation: false
        seccompProfile: { type: RuntimeDefault }
      containers:
        - name: minio
          image: quay.io/minio/minio:latest
          args: ["server", "/data", "--console-address", ":9001"]
          ports:
            - containerPort: 9000
            - containerPort: 9001
          envFrom:
            - secretRef: { name: models-pipeline-secrets }
          volumeMounts:
            - name: data
              mountPath: /data
          readinessProbe:
            httpGet: { path: /minio/health/ready, port: 9000 }
            initialDelaySeconds: 10
            periodSeconds: 10
          livenessProbe:
            httpGet: { path: /minio/health/live, port: 9000 }
            initialDelaySeconds: 20
            periodSeconds: 20
          resources:
            requests: { cpu: "250m", memory: "256Mi" }
            limits:   { cpu: "1000m", memory: "1Gi" }
      volumes:
        - name: data
          persistentVolumeClaim: { claimName: minio-data-pvc }
---
apiVersion: v1
kind: Service
metadata:
  name: minio
  namespace: ${NS}
  labels: { app: minio }
spec:
  selector: { app: minio }
  ports:
    - name: api
      port: 9000
      targetPort: 9000
    - name: console
      port: 9001
      targetPort: 9001
---
apiVersion: route.openshift.io/v1
kind: Route
metadata:
  name: minio-api
  namespace: ${NS}
spec:
  to: { kind: Service, name: minio }
  port: { targetPort: api }
  tls: { termination: edge }
---
apiVersion: route.openshift.io/v1
kind: Route
metadata:
  name: minio-console
  namespace: ${NS}
spec:
  to: { kind: Service, name: minio }
  port: { targetPort: console }
  tls: { termination: edge }
